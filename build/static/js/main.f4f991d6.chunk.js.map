{"version":3,"sources":["Joke.js","Home.js","App.js","serviceWorker.js","index.js"],"names":["Joke","state","joke","componentDidMount","a","getJoke","id","props","match","params","axios","get","response","console","log","setState","data","this","punchline","React","Component","Home","jokes","map","i","key","to","setup","App","fetchJokes","className","exact","path","render","length","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uUAkCeA,E,2MA9BbC,MAAQ,CACNC,KAAM,M,EAGRC,kB,sBAAoB,sBAAAC,EAAA,sDAClB,EAAKC,UADa,2C,EAIpBA,Q,sBAAU,8BAAAD,EAAA,6DACJE,EAAK,EAAKC,MAAMC,MAAMC,OAAOH,GADzB,SAGaI,IAAMC,IAAN,eAAkBL,IAH/B,OAGJM,EAHI,OAIRC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CAAEb,KAAMU,EAASI,KAAKd,OAL5B,2C,wEAUR,OADAW,QAAQC,IAAIG,KAAKhB,MAAMC,MAErB,6BACGe,KAAKhB,MAAMC,KACV,4BAAKe,KAAKhB,MAAMC,KAAKgB,WAErB,6C,GAxBSC,IAAMC,WCDZC,EAAO,SAACd,GACnB,OACE,6BACGA,EAAMe,MAAMC,KAAI,SAACrB,EAAMsB,GAAP,OACf,wBAAIC,IAAKD,GACP,kBAAC,IAAD,CAASE,GAAE,gBAAWxB,EAAKI,KAAOJ,EAAKyB,aCyClCC,G,iNAxCb3B,MAAQ,CACNqB,MAAO,I,EAOTO,W,sBAAa,4BAAAzB,EAAA,sEACUM,IAAMC,IAAI,YADpB,OACPC,EADO,OAEX,EAAKG,SAAS,CAAEO,MAAOV,EAASI,KAAKM,QAF1B,2C,mFAHXL,KAAKY,e,+BAQG,IACAP,EAAUL,KAAKhB,MAAfqB,MACR,OACE,yBAAKQ,UAAU,OACb,kBAAC,IAAD,KACE,kDACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,OAAK,EACLC,KAAK,IACLC,OAAQ,SAAC1B,GAAD,OACNe,EAAMY,OAAS,EAAI,kBAAC,EAAD,iBAAU3B,EAAV,CAAiBe,MAAOA,KAAY,QAG3D,kBAAC,IAAD,CACES,OAAK,EACLC,KAAK,YACLC,OAAQ,SAAC1B,GAAD,OAAW,kBAAC,EAASA,MAE/B,kBAAC,IAAD,CAAOyB,KAAK,IAAIC,OAAQ,SAAC1B,GAAD,MAAW,eAbrC,c,GApBQY,IAAMC,YCKJe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS9B,MACvB,2DCZN+B,IAASN,OAAO,kBAAC,EAAD,MAASO,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f4f991d6.chunk.js","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\n\nclass Joke extends React.Component {\n  state = {\n    joke: null\n  };\n\n  componentDidMount = async () => {\n    this.getJoke();\n  };\n\n  getJoke = async () => {\n    let id = this.props.match.params.id;\n    // console.log(props.match.params.id);\n    let response = await axios.get(`/api/${id}`);\n    console.log(response);\n    this.setState({ joke: response.data.joke });\n  };\n\n  render() {\n    console.log(this.state.joke);\n    return (\n      <div>\n        {this.state.joke ? (\n          <h3>{this.state.joke.punchline}</h3>\n        ) : (\n          <i>isLoading</i>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Joke;\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nexport const Home = (props) => {\n  return (\n    <div>\n      {props.jokes.map((joke, i) => (\n        <li key={i}>\n          <NavLink to={`/joke/${joke.id}`}>{joke.setup}</NavLink>\n        </li>\n      ))}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Joke from \"./Joke\";\nimport { Home } from \"./Home\";\nimport axios from \"axios\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  state = {\n    jokes: []\n  };\n\n  componentDidMount() {\n    this.fetchJokes();\n  }\n\n  fetchJokes = async () => {\n    let response = await axios.get(\"/api/all\");\n    this.setState({ jokes: response.data.jokes });\n  };\n\n  render() {\n    const { jokes } = this.state;\n    return (\n      <div className=\"App\">\n        <Router>\n          <p>Jokes for the day!!</p>\n          <Switch>\n            <Route\n              exact\n              path=\"/\"\n              render={(props) =>\n                jokes.length > 0 ? <Home {...props} jokes={jokes} /> : null\n              }\n            />\n            <Route\n              exact\n              path=\"/joke/:id\"\n              render={(props) => <Joke {...props} />}\n            />\n            <Route path=\"*\" render={(props) => \"Not Found\"} />} />\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}